/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_C110P_SERIAL_PB_H_INCLUDED
#define PB_C110P_SERIAL_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _C110PRegion {
    C110PRegion_REGION_UNSPECIFIED = 0,
    C110PRegion_REGION_BODY = 1,
    C110PRegion_REGION_LEG = 2,
    C110PRegion_REGION_NECK = 3,
    C110PRegion_REGION_DOME = 4
} C110PRegion;

typedef enum _C110PActuator {
    C110PActuator_UNSPECIFIED = 0,
    C110PActuator_BODY_NECK = 1
} C110PActuator;

/* Struct definitions */
typedef struct _AckCommand {
    bool acknowledged;
    char reason[16]; /* Limit string to 16 bytes; */
} AckCommand;

typedef struct _LedCommand {
    uint32_t start;
    uint32_t end;
    uint32_t duration;
} LedCommand;

typedef struct _MoveCommand {
    C110PActuator target;
    uint32_t x;
    uint32_t y;
    uint32_t z;
} MoveCommand;

typedef struct _SoundCommand {
    uint32_t id;
    bool play;
    bool syncToLeds;
} SoundCommand;

typedef struct _C110PCommand {
    uint32_t id;
    C110PRegion source;
    C110PRegion target;
    pb_size_t which_data;
    union _C110PCommand_data {
        AckCommand ack;
        LedCommand led;
        MoveCommand move;
        SoundCommand sound;
    } data;
} C110PCommand;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _C110PRegion_MIN C110PRegion_REGION_UNSPECIFIED
#define _C110PRegion_MAX C110PRegion_REGION_DOME
#define _C110PRegion_ARRAYSIZE ((C110PRegion)(C110PRegion_REGION_DOME+1))

#define _C110PActuator_MIN C110PActuator_UNSPECIFIED
#define _C110PActuator_MAX C110PActuator_BODY_NECK
#define _C110PActuator_ARRAYSIZE ((C110PActuator)(C110PActuator_BODY_NECK+1))

#define C110PCommand_source_ENUMTYPE C110PRegion
#define C110PCommand_target_ENUMTYPE C110PRegion



#define MoveCommand_target_ENUMTYPE C110PActuator



/* Initializer values for message structs */
#define C110PCommand_init_default                {0, _C110PRegion_MIN, _C110PRegion_MIN, 0, {AckCommand_init_default}}
#define AckCommand_init_default                  {0, ""}
#define LedCommand_init_default                  {0, 0, 0}
#define MoveCommand_init_default                 {_C110PActuator_MIN, 0, 0, 0}
#define SoundCommand_init_default                {0, 0, 0}
#define C110PCommand_init_zero                   {0, _C110PRegion_MIN, _C110PRegion_MIN, 0, {AckCommand_init_zero}}
#define AckCommand_init_zero                     {0, ""}
#define LedCommand_init_zero                     {0, 0, 0}
#define MoveCommand_init_zero                    {_C110PActuator_MIN, 0, 0, 0}
#define SoundCommand_init_zero                   {0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define AckCommand_acknowledged_tag              1
#define AckCommand_reason_tag                    2
#define LedCommand_start_tag                     1
#define LedCommand_end_tag                       2
#define LedCommand_duration_tag                  3
#define MoveCommand_target_tag                   1
#define MoveCommand_x_tag                        2
#define MoveCommand_y_tag                        3
#define MoveCommand_z_tag                        4
#define SoundCommand_id_tag                      1
#define SoundCommand_play_tag                    2
#define SoundCommand_syncToLeds_tag              3
#define C110PCommand_id_tag                      1
#define C110PCommand_source_tag                  2
#define C110PCommand_target_tag                  3
#define C110PCommand_ack_tag                     4
#define C110PCommand_led_tag                     5
#define C110PCommand_move_tag                    6
#define C110PCommand_sound_tag                   7

/* Struct field encoding specification for nanopb */
#define C110PCommand_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   id,                1) \
X(a, STATIC,   SINGULAR, UENUM,    source,            2) \
X(a, STATIC,   SINGULAR, UENUM,    target,            3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,ack,data.ack),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,led,data.led),   5) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,move,data.move),   6) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,sound,data.sound),   7)
#define C110PCommand_CALLBACK NULL
#define C110PCommand_DEFAULT NULL
#define C110PCommand_data_ack_MSGTYPE AckCommand
#define C110PCommand_data_led_MSGTYPE LedCommand
#define C110PCommand_data_move_MSGTYPE MoveCommand
#define C110PCommand_data_sound_MSGTYPE SoundCommand

#define AckCommand_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     acknowledged,      1) \
X(a, STATIC,   SINGULAR, STRING,   reason,            2)
#define AckCommand_CALLBACK NULL
#define AckCommand_DEFAULT NULL

#define LedCommand_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   start,             1) \
X(a, STATIC,   SINGULAR, UINT32,   end,               2) \
X(a, STATIC,   SINGULAR, UINT32,   duration,          3)
#define LedCommand_CALLBACK NULL
#define LedCommand_DEFAULT NULL

#define MoveCommand_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    target,            1) \
X(a, STATIC,   SINGULAR, UINT32,   x,                 2) \
X(a, STATIC,   SINGULAR, UINT32,   y,                 3) \
X(a, STATIC,   SINGULAR, UINT32,   z,                 4)
#define MoveCommand_CALLBACK NULL
#define MoveCommand_DEFAULT NULL

#define SoundCommand_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   id,                1) \
X(a, STATIC,   SINGULAR, BOOL,     play,              2) \
X(a, STATIC,   SINGULAR, BOOL,     syncToLeds,        3)
#define SoundCommand_CALLBACK NULL
#define SoundCommand_DEFAULT NULL

extern const pb_msgdesc_t C110PCommand_msg;
extern const pb_msgdesc_t AckCommand_msg;
extern const pb_msgdesc_t LedCommand_msg;
extern const pb_msgdesc_t MoveCommand_msg;
extern const pb_msgdesc_t SoundCommand_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define C110PCommand_fields &C110PCommand_msg
#define AckCommand_fields &AckCommand_msg
#define LedCommand_fields &LedCommand_msg
#define MoveCommand_fields &MoveCommand_msg
#define SoundCommand_fields &SoundCommand_msg

/* Maximum encoded size of messages (where known) */
#define AckCommand_size                          19
#define C110PCommand_size                        32
#define C110P_SERIAL_PB_H_MAX_SIZE               C110PCommand_size
#define LedCommand_size                          18
#define MoveCommand_size                         20
#define SoundCommand_size                        10

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
